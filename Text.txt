#include <stdio.h>
#include <stdlib.h>
#define SIZE 6

int mutex = 1, full = 0, empty = SIZE, x = 0;
int items[SIZE];
int front = -1, rear = -1;

// Check if the queue is full
int isFull() {
    if ((front == rear + 1) || (front == 0 && rear == SIZE - 1)) 
        return 1;
    return 0;
}

// Check if the queue is empty
int isEmpty() {
    if (front == -1) 
        return 1;
    return 0;
}

// Adding an element
void enQueue(int element) {
    if (isFull()) {
        printf("\n Queue is full!! \n");
    } else {
        if (front == -1) 
            front = 0;
        rear = (rear + 1) % SIZE;
        items[rear] = element;
        printf("\n Inserted -> %d", element);
    }
}

// Display the queue
void display() {
    int i;
    if (isEmpty())
        printf(" \n Empty Queue\n");
    else {
        printf("\n Front -> %d ", front);
        printf("\n Items -> ");
        for (i = front; i != rear; i = (i + 1) % SIZE) {
            printf("%d ", items[i]);
        }
        printf("%d ", items[i]);
        printf("\n Rear -> %d \n", rear);
    }
}

// Removing an element
int deQueue() {
    int element;
    if (isEmpty()) {
        printf("\n Queue is empty !! \n");
        return (-1);
    } else {
        element = items[front];
        if (front == rear) {
            front = -1;
            rear = -1;
        } else {
            front = (front + 1) % SIZE;
        }
        printf("\n Deleted element -> %d \n", element);  
        display();
        return (element);
    }
}

int wait(int s) {
    return (--s);
}

int signal(int s) {
    return (++s);
}

void producer() {
    mutex = wait(mutex);
    full = signal(full);
    empty = wait(empty);
    enQueue(x);
    printf("\nProducer produces the item %d", x);
    x++;
    mutex = signal(mutex);
}

void consumer() {
    mutex = wait(mutex);
    full = wait(full);
    empty = signal(empty);
    printf("\nConsumer consumes item %d", deQueue());
    mutex = signal(mutex);
}

int main() {
    int n;
    printf("\n1.Producer\n2.Consumer\n3.Exit");
    while (1) {
        printf("\nEnter your choice: ");
        scanf("%d", &n);
        switch (n) {
            case 1:
                if ((mutex == 1) && (empty != 0))  
                    producer();
                else
                    printf("Buffer is full!!");
                display();
                break;
            case 2:
                if ((mutex == 1) && (full != 0))  
                    consumer();
                else
                    printf("Buffer is empty!!");
                break;
            case 3:
                exit(0);
                break;
            default:
                printf("Invalid choice! Please enter a valid option.");
        }
    }
    return 0;
}